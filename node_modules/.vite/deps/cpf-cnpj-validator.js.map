{
  "version": 3,
  "sources": ["../../cpf-cnpj-validator/dist/cpf-cnpj-validator.es.js"],
  "sourcesContent": ["/*!\n * cpf-cnpj-validator v1.0.3\n * (c) 2020-present Carvalho, Vinicius Luiz <carvalho.viniciusluiz@gmail.com>\n * Released under the MIT License.\n */\nconst BLACKLIST = [\r\n    '00000000000',\r\n    '11111111111',\r\n    '22222222222',\r\n    '33333333333',\r\n    '44444444444',\r\n    '55555555555',\r\n    '66666666666',\r\n    '77777777777',\r\n    '88888888888',\r\n    '99999999999',\r\n    '12345678909'\r\n];\r\nconst STRICT_STRIP_REGEX = /[.-]/g;\r\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\r\nconst verifierDigit = (digits) => {\r\n    const numbers = digits\r\n        .split('')\r\n        .map(number => {\r\n        return parseInt(number, 10);\r\n    });\r\n    const modulus = numbers.length + 1;\r\n    const multiplied = numbers.map((number, index) => number * (modulus - index));\r\n    const mod = multiplied.reduce((buffer, number) => buffer + number) % 11;\r\n    return (mod < 2 ? 0 : 11 - mod);\r\n};\r\nconst strip = (number, strict) => {\r\n    const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\r\n    return (number || '').replace(regex, '');\r\n};\r\nconst format = (number) => {\r\n    return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\r\n};\r\nconst isValid = (number, strict) => {\r\n    const stripped = strip(number, strict);\r\n    if (!stripped) {\r\n        return false;\r\n    }\r\n    if (stripped.length !== 11) {\r\n        return false;\r\n    }\r\n    if (BLACKLIST.includes(stripped)) {\r\n        return false;\r\n    }\r\n    let numbers = stripped.substr(0, 9);\r\n    numbers += verifierDigit(numbers);\r\n    numbers += verifierDigit(numbers);\r\n    return numbers.substr(-2) === stripped.substr(-2);\r\n};\r\nconst generate = (formatted) => {\r\n    let numbers = '';\r\n    for (let i = 0; i < 9; i += 1) {\r\n        numbers += Math.floor(Math.random() * 9);\r\n    }\r\n    numbers += verifierDigit(numbers);\r\n    numbers += verifierDigit(numbers);\r\n    return (formatted ? format(numbers) : numbers);\r\n};\r\nvar cpf = {\r\n    verifierDigit,\r\n    strip,\r\n    format,\r\n    isValid,\r\n    generate,\r\n};\n\nconst BLACKLIST$1 = [\r\n    '00000000000000',\r\n    '11111111111111',\r\n    '22222222222222',\r\n    '33333333333333',\r\n    '44444444444444',\r\n    '55555555555555',\r\n    '66666666666666',\r\n    '77777777777777',\r\n    '88888888888888',\r\n    '99999999999999'\r\n];\r\nconst STRICT_STRIP_REGEX$1 = /[-\\\\/.]/g;\r\nconst LOOSE_STRIP_REGEX$1 = /[^\\d]/g;\r\nconst verifierDigit$1 = (digits) => {\r\n    let index = 2;\r\n    const reverse = digits.split('').reduce((buffer, number) => {\r\n        return [parseInt(number, 10)].concat(buffer);\r\n    }, []);\r\n    const sum = reverse.reduce((buffer, number) => {\r\n        buffer += number * index;\r\n        index = (index === 9 ? 2 : index + 1);\r\n        return buffer;\r\n    }, 0);\r\n    const mod = sum % 11;\r\n    return (mod < 2 ? 0 : 11 - mod);\r\n};\r\nconst strip$1 = (number, strict) => {\r\n    const regex = strict ? STRICT_STRIP_REGEX$1 : LOOSE_STRIP_REGEX$1;\r\n    return (number || '').replace(regex, '');\r\n};\r\nconst format$1 = (number) => {\r\n    return strip$1(number).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n};\r\nconst isValid$1 = (number, strict) => {\r\n    const stripped = strip$1(number, strict);\r\n    if (!stripped) {\r\n        return false;\r\n    }\r\n    if (stripped.length !== 14) {\r\n        return false;\r\n    }\r\n    if (BLACKLIST$1.includes(stripped)) {\r\n        return false;\r\n    }\r\n    let numbers = stripped.substr(0, 12);\r\n    numbers += verifierDigit$1(numbers);\r\n    numbers += verifierDigit$1(numbers);\r\n    return numbers.substr(-2) === stripped.substr(-2);\r\n};\r\nconst generate$1 = (formatted) => {\r\n    let numbers = '';\r\n    for (let i = 0; i < 12; i += 1) {\r\n        numbers += Math.floor(Math.random() * 9);\r\n    }\r\n    numbers += verifierDigit$1(numbers);\r\n    numbers += verifierDigit$1(numbers);\r\n    return (formatted ? format$1(numbers) : numbers);\r\n};\r\nvar cnpj = {\r\n    verifierDigit: verifierDigit$1,\r\n    strip: strip$1,\r\n    format: format$1,\r\n    isValid: isValid$1,\r\n    generate: generate$1\r\n};\n\nconst validator = joi => ({\r\n    type: 'document',\r\n    base: joi.string(),\r\n    messages: {\r\n        'document.cpf': 'CPF inv\u00E1lido',\r\n        'document.cnpj': 'CNPJ inv\u00E1lido'\r\n    },\r\n    rules: {\r\n        cpf: {\r\n            validate(value, helpers, args, options) {\r\n                if (!cpf.isValid(value)) {\r\n                    return helpers.error('document.cpf');\r\n                }\r\n                return value;\r\n            }\r\n        },\r\n        cnpj: {\r\n            validate(value, helpers, args, options) {\r\n                if (!cnpj.isValid(value)) {\r\n                    return helpers.error('document.cnpj');\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n});\n\nexport default validator;\nexport { cpf, cnpj, validator };\n"],
  "mappings": "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",
  "names": []
}
